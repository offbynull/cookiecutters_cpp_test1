# NOTE: If you change something in this workflow (e.g., bug fix, workaround, optimization, ...), make sure the cookiecutter is updated as
#       well.
name: build-wheels
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
jobs:
  # Define meson build types
  # ------------------------
  # Each job further below this one builds and runs on a specific operating system / architecture. To ensure nothing wonky happens with C++
  # optimizations, each of those jobs should be run multiple times, once for each meson build profile (e.g., release, debug, minSize,
  # etc..). Given that GitHub Actions doesn't let you set a "matrix strategy" across all jobs (it only allows it per job), the "matrix
  # strategy" is defined once here as its own job and re-used in other jobs further down from it (source:
  # https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/run-job-variations#using-an-output-to-define-two-matrices)
  define-build-type-matrix:
    runs-on: ubuntu-latest
    outputs:
      build-types: ${{ steps.define-build-types.outputs.build-types }}
      python-version: ${{ steps.define-build-types.outputs.python-version }}
    steps:
      - name: Define build types
        id: define-build-types
        run: |
          # WARNING: Do not place "debug" into build-types. The build-type "debug" is ignored during wheel building (build-type will
          #          automatically switch to "release" even if meson's been configured to use "debug"). Even if it wasn't, it seems you
          #          need a special debug version of Python installed because you can't call something built with debug CRT from something
          #          built with release CRT (is this a Windows only problem?). Even if you had everything you needed, apparently there's a
          #          requirement that wheels must be release builds only.
          #
          #          I tried overriding this functionality so that it builds in debug mode, both with "pip install ." and "python -m build
          #          --wheel". It doesn't work even when debug python is installed because meson always points to release python
          #          executables and libraries. There's all kinds of unfortunate nuacnes at play.
          #
          #          Best course of action is to do all testing through gtest and just treat the extension as a thin-layer into code that's
          #          already been tested. 
          echo 'build-types=["release"]' >> "$GITHUB_OUTPUT"
          echo 'python-version=["3.10", "3.11", "3.12", "3.13", "3.14"]' >> "$GITHUB_OUTPUT"
  build-wheel-linux-gcc:
    runs-on: ubuntu-latest
    needs: define-build-type-matrix
    strategy:
      matrix:
        build-type: ${{ fromJSON(needs.define-build-type-matrix.outputs.build-types) }}
        python-version: ${{ fromJSON(needs.define-build-type-matrix.outputs.python-version) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/workflows/setup-linux-gcc
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        run: |
          # Compile and run.
          meson setup --reconfigure buildDir --buildtype=${{ matrix.build-type }}
          python -m build --wheel
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-linux-gcc-py${{ matrix.python-version  }}-${{ matrix.build-type }}
          path: dist/*.whl
          if-no-files-found: error
      # - name: Publish to Artifactory
      #   run: |
      #     python -m pip install --upgrade twine
      #     twine upload \
      #       --repository-url https://<artifactory-url>/api/pypi/<repo>/ \
      #       --username USERNAME \
      #       --password PASSWORD \
      #       dist/*.whl
  build-wheel-windows-msvc:
    runs-on: windows-latest
    needs: define-build-type-matrix
    strategy:
      matrix:
        build-type: ${{ fromJSON(needs.define-build-type-matrix.outputs.build-types) }}
        python-version: ${{ fromJSON(needs.define-build-type-matrix.outputs.python-version) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/workflows/setup-windows-msvc
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        shell: pwsh
        run: |
          # Compile and run.
          meson setup --reconfigure buildDir --buildtype=${{ matrix.build-type }}
          python -m build --wheel
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-windows-msvc-py${{ matrix.python-version  }}-${{ matrix.build-type }}
          path: dist/*.whl
          if-no-files-found: error
      # - name: Publish to Artifactory
      #   run: |
      #     python -m pip install --upgrade twine
      #     twine upload \
      #       --repository-url https://<artifactory-url>/api/pypi/<repo>/ \
      #       --username USERNAME \
      #       --password PASSWORD \
      #       dist/*.whlpython -m build --wheel
  build-wheel-macos-gcc:
    runs-on: macos-latest
    needs: define-build-type-matrix
    strategy:
      matrix:
        build-type: ${{ fromJSON(needs.define-build-type-matrix.outputs.build-types) }}
        python-version: ${{ fromJSON(needs.define-build-type-matrix.outputs.python-version) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/workflows/setup-macos-gcc
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        run: |
          # Compile and run.
          meson setup --reconfigure buildDir --buildtype=${{ matrix.build-type }}
          python -m build --wheel
          # Use delocate to vendor shared libraries into the wheel. Because GCC is being used instead of Apple clang, people who download
          # the wheel will either need to have GCC's libstd++ installed or libstdc++ needs to be bundled in (as is being done by delocate
          # here). This would have to be done as well if you were using non-Apple clang (e.g., a newer more up-to-date version of clang).
          python -m pip install delocate
          delocate-listdeps --all dist/*.whl
          delocate-wheel -v dist/*.whl
          delocate-listdeps --all dist/*.whl  # Run again to verify?
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-macos-gcc-py${{ matrix.python-version  }}-${{ matrix.build-type }}
          path: dist/*.whl
          if-no-files-found: error
      # - name: Publish to Artifactory
      #   run: |
      #     python -m pip install --upgrade twine
      #     twine upload \
      #       --repository-url https://<artifactory-url>/api/pypi/<repo>/ \
      #       --username USERNAME \
      #       --password PASSWORD \
      #       dist/*.whl
